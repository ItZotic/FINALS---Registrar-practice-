#include<iostream>
#include<fstream>
#include<algorithm> 
using namespace std;

struct Person {
    string name;
    string password;
    string dateOfBirth;
    string address;
    string civilStatus;
    string fatherName;
    string motherMaidenName;
    int income; 
    Person* next;

    Person(const string& n, const string& pw, const string& dob, const string& addr,
           const string& cs, const string& fn, const string& mmn, int inc)
        : name(n), password(pw), dateOfBirth(dob), address(addr), civilStatus(cs),
          fatherName(fn), motherMaidenName(mmn), income(inc), next(nullptr) {}
};

// Function to insert a person into the linked list sorted by name (surname)
void insertSorted(Person*& head, Person* newPerson) {
    if (head == nullptr || newPerson->name < head->name) {
        newPerson->next = head;
        head = newPerson;
    } else {
        Person* current = head;
        while (current->next != nullptr && current->next->name < newPerson->name) {
            current = current->next;
        }
        newPerson->next = current->next;
        current->next = newPerson;
    }
}

void displayList(const Person* head) {
    const Person* current = head;
    while (current != nullptr) {
        cout << "Name: " << current->name << endl;
        cout << "Password: " << current->password << endl;
        cout << "Date of Birth: " << current->dateOfBirth << endl;
        cout << "Address: " << current->address << endl;
        cout << "Civil Status: " << current->civilStatus << endl;
        cout << "Father's Name: " << current->fatherName << endl;
        cout << "Mother's Maiden Name: " << current->motherMaidenName << endl;
        cout << "Monthly Income: PHP " << current->income << endl;
        cout << endl;
        current = current->next;
    }
}

int main()
{
    string command;
    Person* head = nullptr; 

    while (true)
    {
        cout << "(register/exit/login/display)" << endl
             << "Command: ";
        getline(cin, command);

        if (command == "exit")
        {
            Person* current = head;
            while (current != nullptr) {
                Person* next = current->next;
                delete current;
                current = next;
            }
            return 1;
        }
        else if (command == "register")
        {
            Person* newPerson = new Person("", "", "", "", "", "", "", 0);

            cout << "\nRegistration Form:" << endl;
            cout << "Name: ";
            getline(cin, newPerson->name);

            cout << "Password: ";
            getline(cin, newPerson->password);

            cout << "Date of Birth: ";
            getline(cin, newPerson->dateOfBirth);

            cout << "Address: ";
            getline(cin, newPerson->address);

            cout << "Civil Status (Single/Married/Divorced/Widowed): ";
            getline(cin, newPerson->civilStatus);

            cout << "Name of Father: ";
            getline(cin, newPerson->fatherName);

            cout << "Name of Mother (Maiden Name): ";
            getline(cin, newPerson->motherMaidenName);

            cout << "Monthly Income Range:" << endl;
            cout << "1. Below PHP 10,000" << endl;
            cout << "2. PHP 10,000 - PHP 20,000" << endl;
            cout << "3. Above PHP 20,000" << endl;
            cout << "Select an option (1/2/3): ";
            int incomeOption;
            cin >> incomeOption;
            cin.ignore();

            switch (incomeOption) {
                case 1:
                    newPerson->income = 10000; // Below PHP 10,000
                    break;
                case 2:
                    newPerson->income = 15000; // PHP 10,000 - PHP 20,000 (average)
                    break;
                case 3:
                    newPerson->income = 25000; // Above PHP 20,000
                    break;
                default:
                    newPerson->income = 0; // Default to 0 if invalid option
                    break;
            }

            // Insert new person into the linked list in sorted order by name (surname)
            insertSorted(head, newPerson);

            cout << "\nRegistration successful." << endl;
        }
        else if (command == "login")
        {
            // Login functionality not implemented in this example
            cout << "Login functionality not implemented." << endl;
        }
        else if (command == "display")
        {
            // Display all persons in the linked list
            if (head == nullptr) {
                cout << "No data to display." << endl;
            } else {
                cout << "\nList of Registered Persons:" << endl;
                displayList(head);
            }
        }
        else
        {
            cout << "Invalid command. Please try again." << endl;
        }

        cout << "\n\n\n\n\n"; // Give it 5 newlines for clarity
    }

    return 1;
}
